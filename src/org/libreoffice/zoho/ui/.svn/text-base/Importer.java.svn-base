
package org.libreoffice.zoho.ui;

import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.RowFilter;
import javax.swing.UIManager;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.libreoffice.zoho.config.Configuration;
import org.libreoffice.zoho.handler.Document;
import org.libreoffice.zoho.handler.Downloader;
import org.libreoffice.zoho.handler.WriterDocument;
import org.libreoffice.zoho.ui.models.ImportTableModel;

/**
 *
 * @author Amila Surendra
 */
public class Importer extends javax.swing.JFrame {

    Downloader model;

    /** Creates new form Importer */
    public Importer(Downloader model) {

        this.model = model;

        try {
            UIManager.setLookAndFeel(Configuration.getInstance().getLookAndFeel());
        } catch (Exception e) {
        }

        initComponents();
        filterField.setVisible(false);
        this.setIconImage(new ImageIcon(getClass().getResource("/org/libreoffice/zoho/Resources/zoho_icon.png")).getImage());
        pack();
        loadDocuments();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        documentsTable = new javax.swing.JTable();
        listBtn = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        downloadBtn = new javax.swing.JButton();
        filterField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        filterCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import From Zoho");

        documentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(documentsTable);

        listBtn.setText("Refresh List");
        listBtn.setActionCommand("listButton");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Shared", "Public" }));

        downloadBtn.setText("Open");

        jLabel2.setText("Document Type");

        filterCheckBox.setText("Filter documents by tags");
        filterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterCheckBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Search :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                    .addComponent(filterCheckBox, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, 0, 250, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(listBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchField, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE))
                    .addComponent(downloadBtn)
                    .addComponent(filterField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filterCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filterField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-548)/2, (screenSize.height-444)/2, 548, 444);
    }// </editor-fold>//GEN-END:initComponents

    private void filterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterCheckBoxActionPerformed
        // TODO add your handling code here:
        if (filterCheckBox.isSelected()) {
            filterField.setVisible(true);
        } else {
            filterField.setVisible(false);
        }
        pack();
    }//GEN-LAST:event_filterCheckBoxActionPerformed

    public void setTableModel(TableModel model) {
        documentsTable.setModel(model);
    }

    public String getSelectedDocumentID() {
        int row = documentsTable.getSelectedRow();
        return documentsTable.getModel().getValueAt(row, 4).toString();
    }

    public void addDownloadListner(ActionListener downloadListner) {
        downloadBtn.addActionListener(downloadListner);
    }

    public void addSearchListener(KeyListener keyListener) {
        searchField.addKeyListener(keyListener);
    }

    public void addRefreshBtnListener(ActionListener downloadListner) {
        listBtn.addActionListener(downloadListner);
    }

    public void filterTable(String phrase) {
        sorter = new TableRowSorter<ImportTableModel>((ImportTableModel) documentsTable.getModel());
        documentsTable.setRowSorter(sorter);

        if (phrase.length() == 0) {
            sorter.setRowFilter(null);
            return;
        }
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + phrase, 0));

    }

    public String getFiltertext() {
        return searchField.getText();
    }

    public void resize() {
        documentsTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        documentsTable.getColumnModel().getColumn(0).setPreferredWidth(150);
        documentsTable.getColumnModel().getColumn(3).setPreferredWidth(100);
    }

    private void loadDocuments() {
        final Progress refreshProg = new Progress(this, true, "Refreshing Document List", true);
        refreshProg.setVisible(true);

        Thread refreshThread = new Thread() {

            @Override
            public void run() {
                List<Document> documentList = model.getDocumentList(Document.ALL, new WriterDocument());
                setTableModel(new ImportTableModel(documentList));
                resize();
                refreshProg.dispose();
            }
        };
        refreshThread.start();

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable documentsTable;
    private javax.swing.JButton downloadBtn;
    private javax.swing.JCheckBox filterCheckBox;
    private javax.swing.JTextField filterField;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JButton listBtn;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
    TableRowSorter<ImportTableModel> sorter;
}
